# Types Clientes --------------
type Endereco {
  rua: String!
  bairro: String!
  cidade: String!
  estado: String!
  pais: String!
  cep: Int!
  numero: String!
}

type Cliente {
  id: ID!
  nome: String!
  email: String!
  cpf: String!
  dataNasc: String!
  endereco: Endereco!
}

input paramCliente {
  nome: String!
  email: String!
  cpf: String!
  dataNasc: String!
  rua: String!
  bairro: String!
  cidade: String!
  estado: String!
  pais: String!
  cep: Int!
  numero: String!
}

type oneCliente {
  id: ID!
  nome: String!
  email: String!
  cpf: String!
  dataNasc: String!
  rua: String!
  bairro: String!
  cidade: String!
  estado: String!
  pais: String!
  cep: Int!
  numero: String!
}

type Clientes {
  result: [oneCliente!]!
}

# --------------------
# Types Produtos -----
input paramProduto {
  nome: String!
  imagem: String!
  descricao: String!
  peso: Float!
  preco: Float!
  estoque: Int!
}

type Produto {
  id: ID!
  nome: String!
  imagem: String!
  descricao: String!
  peso: Float!
  preco: Float!
  estoque: Int!
}

type Produtos {
  result: [Produto!]!
}

# ------------------------
# Type Errors ------------
type Error {
  path: String!
  message: String!
}

type objErr {
  err: Error!
}
# -----------------------
# Clientes Unions -------
union ClientesResult = Clientes | objErr
union ClienteIdResult = Cliente | objErr
# ----------------------
# Produtos Unions ------
union ProdutosResult = Produtos | objErr
union ProdutoIdResult = Produto | objErr


type Query {
  clientes: ClientesResult!
  cliente(id: ID!): ClienteIdResult!
  produtos: ProdutosResult!
  produto(id: ID!): ProdutoIdResult!
}

type Mutation {
  createCliente(cliente: paramCliente!): ClienteIdResult!
  updateCliente(id: ID!, dados: paramCliente!): ClienteIdResult!
  deleteCliente(id: ID!): String!
  createProduto(produto: paramProduto!): ProdutoIdResult!
  updateProduto(id: ID!, dados: paramProduto): ProdutoIdResult!
  deleteProduto(id: ID!): String!
}
